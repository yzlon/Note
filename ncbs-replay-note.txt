java 命令的参数
用法: java [-options] class [args...] (执行类)如：java -cp ./my.jar com.yzl.Test(Test是main函数)
       或  java [-options] -jar jarfile [args...](执行 jar 文件)
其中选项包括:
    -d32          使用 32 位数据模型 (如果可用)
    -d64          使用 64 位数据模型 (如果可用)
    -server       选择 "server" VM 默认 VM 是 server.
    -cp <目录和 zip/jar 文件的类搜索路径> 和classpath一样
    -classpath <目录和 zip/jar 文件的类搜索路径>和cp参数一样
                  用 : 分隔的目录, JAR 档案
                  和 ZIP 档案列表, 用于搜索类文件。
    -D<名称>=<值>
                  设置系统属性,可以在程序中用System.getProperty(key);获得
    -verbose:[class|gc|jni]
                  启用详细输出
    -version      输出产品版本并退出
    -showversion  输出产品版本并继续
    -? -help      输出此帮助消息
    -X            输出非标准选项的帮助


1、将pom下的cqrcb的父项目改成自己本地建的父项目。在本地的父项目中加上该项需要的一下properties和依赖。
2、pom文件详解
	<resources>    
	   <!--这个元素描述了项目相关或测试相关的所有资源路径-->    
	   <resource>    
		    <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。-->    
		    <targetPath/>    
		    <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。-->    
		    <filtering/>    
		    <!--描述存放资源的源目录，该路径相对POM路径-->    
		    <directory/>    
		    <!--包含的模式列表，例如**/*.xml.-->    
		    <includes/>    
		    <!--排除的模式列表，例如**/*.xml-->    
		    <excludes/>    
	   </resource>    
 	 </resources> 
 	 编译插件：   
 		 <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<configuration>
				<source>${jdk.version}</source>
				<target>${jdk.version}</target>
				<compilerVersion>${jdk.version}</compilerVersion>
			</configuration>
		</plugin>
	直接打包成可运行的jar的插件：
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<configuration>
				<archive>
					<addMavenDescriptor>false</addMavenDescriptor>
					<manifest>
						<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
					</manifest>
					<manifestEntries>
						<Build-timestamp>${maven.build.timestamp}</Build-timestamp>
					</manifestEntries>
				</archive>
			</configuration>
		</plugin>
	
	maven-assembly-plugin打包插件：执行mvn assembly:assembly
		<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration><!-- 这个配置放到这儿，放在这儿运行报错 -->
					<descriptors> <!--描述文件路径 -->
						<descriptor>src/main/assembly/zip.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>  <!--执行器 mvn assembly:assembly -->
					<execution>
						<id>make-zip</id><!--名字任意 -->
						<phase>package</phase><!-- 绑定到package生命周期阶段上 -->
						<goals>
							<goal>single</goal><!-- 只运行一次 -->
						</goals>
						<!-- 这个配置放到上面，放在这儿运行报错 -->
						<!-- 
							<configuration> 
								<descriptors> 
									<descriptor>src/main/assembly/zip.xml</descriptor> 
								</descriptors> 
							</configuration> 
						-->
					</execution>
				</executions>
			</plugin>
			
obj.instanceof(class)也就是说这个对象是不是这种类型，
	1.一个对象是本身类的一个对象
	2.一个对象是本身类父类（父类的父类）和接口（接口的接口）的一个对象
	3.所有对象都是Object
	4.凡是null有关的都是false  null.instanceof(class)

class.inInstance(obj)这个对象能不能被转化为这个类
	1.一个对象是本身类的一个对象
	2.一个对象能被转化为本身类所继承类（父类的父类等）和实现的接口（接口的父接口）强转
	3.所有对象都能被Object的强转
	4.凡是null有关的都是false   class.inInstance(null)
	类名.class和对象.getClass()几乎没有区别，因为一个类被类加载器加载后，就是唯一的一个类。

DataLoadServer
	Spring 容器中的 Bean 是有生命周期的，Spring 允许 Bean 在初始化完成后以及销毁前执行特定的操作。下面是常用的三种指定特定操作的方法：
		通过实现InitializingBean/DisposableBean 接口来定制初始化之后/销毁之前的操作方法；
		通过<bean> 元素的 init-method/destroy-method属性指定初始化之后 /销毁之前调用的操作方法；
		在指定方法上加上@PostConstruct或@PreDestroy注解来制定该方法是在初始化之后还是销毁之前调用。
	
	spring集成JMS
		1、定义真正的connectionfacotry，由JMS厂商提供的。比如activemq
			<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->  
			<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
			    <property name="brokerURL" value="tcp://localhost:61616"/>  
			</bean> 
		1.1如果要用连接池，可以定义个一连接池，然后注入到2步骤的targetConnectionFactory
			<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">  
			    <property name="connectionFactory" ref="targetConnectionFactory"/>  
			    <property name="maxConnections" value="10"/>  
			</bean> 		
		2、spring配置管理jms的connectionfactory
			<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
			<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">  
			    <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
			    <property name="targetConnectionFactory" ref="targetConnectionFactory"/>  
			</bean>  
		3、配置JsmTemplate实现生产者
			<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等,默认注入一个ActiveMQQueue -->  
			<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
			    <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
			    <property name="connectionFactory" ref="connectionFactory"/>  
			</bean> 
		4、定义消息的目的地Destination
			<!--这个是队列目的地，点对点的-->  
			<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
			    <constructor-arg>  
			        <value>QUEUE_NAME</value>  
			    </constructor-arg>  
			</bean>  
			<!--这个是主题目的地，一对多的-->  
			<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">  
			    <constructor-arg value="TOPIC_NAME"/>  
			</bean>   	
		5、配置消费者JmsContainer
			5.1定义消息监听，自己实现接口MessageListener
				<!-- 消息监听器 -->  
				<bean id="consumerMessageListener" class="com.tiantian.springintejms.listener.ConsumerMessageListener"/>      
			5.2配置消费者	  
				<!-- 消息监听容器 -->  
				<bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
				    <property name="connectionFactory" ref="connectionFactory" />  
				    <property name="destination" ref="queueDestination" />  
				    <property name="messageListener" ref="consumerMessageListener" />  
				</bean>
	
对byte数据进行压缩
	Deflater
	Inflater解码			
				