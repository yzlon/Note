在Linux上安装Git
	首先，你可以试着输入git，看看系统有没有安装Git：
		$ git
		The program 'git' is currently not installed. You can install it by typing:	sudo apt-get install git
	如果是其他Linux版本，可以直接通过源码安装。
	先从Git官网下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。
	https://www.kernel.org/pub/software/scm/git/
	然后编译并安装：
		$ tar -zxf git-1.7.2.2.tar.gz
		$ cd git-1.7.2.2
		$ make prefix=/usr/local all
		$ sudo make prefix=/usr/local install
		
创建一个版本库，
	1、选择一个合适的地方，创建一个空目录：
		$ mkdir learngit
		$ cd learngit
		$ pwd
		/Users/michael/learngit
	2、通过git init命令把这个目录变成Git可以管理的仓库：
		$ git init
			Initialized empty Git repository in /Users/michael/learngit/.git/
	3、必须如下配置
		$ git config user.name "yzlon"
		$ git config user.email "yzlon@163.com"
	
把文件放入git仓库：
	一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
	1、用命令git add告诉Git，把文件添加到仓库：
		$ git add file1.txt file2.txt file3.txt
		执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。
	2、用命令git commit告诉Git，把文件提交到仓库：
		$ git commit -m "本次提交的说明"
	3、运行git status命令看看结果：
		$ git status
	4、git log命令查看历史记录：
		$ git log
		可以加上参数 --pretty=oneline显示简要信息
			$ git log --pretty=oneline
	5、版本回退
		首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
		现在，我们要把当前版本回退到上一个版本，就可以使用git reset命令：
			$ git reset --hard HEAD^
			HEAD is now at ea34578 add distributed
				--hard：重设（reset） index（stage）和working directory，自从<commit>以来在working directory中的任何改变都被丢弃，并把HEAD指向<commit>。
				--soft：index和working directory中的内容不作任何改变，仅仅把HEAD指向<commit>。这个模式的效果是，执行完毕后，自从<commit>以来的所有改变都会显示在git status的"Changes to be committed"中。

		回到最新的那个版本，找到最新的commit id是3628164...，于是就可以指定回到未来的某个版本：
			$ git reset --hard 3628164
				HEAD is now at 3628164 append GPL
			版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
	6、Git提供了一个命令git reflog用来记录你的每一次命令，也可找到commit的版本号：
		$ git reflog
			ea34578 HEAD@{0}: reset: moving to HEAD^
			3628164 HEAD@{1}: commit: append GPL
			ea34578 HEAD@{2}: commit: add distributed
			cb926e7 HEAD@{3}: commit (initial): wrote a readme file
	7、比较2个版本
		$ git diff version_no1 version_no2 : 比较2个历史版本的差异
		$ git diff:比较的是工作目录(Working tree)和暂存区域快照(index)之间的差异
		$ git diff --cached 或者 $ git diff --staged:暂存区stage（index）和版本库之间的差异。
		$ git diff HEAD : 显示工作版本(Working tree)和HEAD的差别
		$ git diff topic master 或 git diff topic..master:直接将两个分支上最新的提交做diff
		$ git diff topic...master:输出自topic和master分别开发以来，master分支上的changed。
		$ git diff --stat:查看简单的diff结果，可以加上--stat参数
		$ git diff test :显示当前目录和另一个叫'test'分支的差别
		$ git diff HEAD -- ./lib :显示当前目录下的lib目录和上次提交之间的差别（更准确的说是在当前分支下）
		diff后显示的信息：
			第一行：表示结果为git格式的diff：　　diff --git a/f1 b/f1  
			第二行：表示两个版本的git哈希值（index区域的6f8a38c对象，与工作目录区域的449b072对象进行比较），最后的六位数字是对象的模式（普通文件，644权限）：index 6f8a38c..449b072 100644
			第三行：表示进行比较的两个文件：--- a/f1  　+++ b/f1  。"---"表示变动前的版本，"+++"表示变动后的版本。 
			第四行：变动的位置用两个@作为起首和结束。 
　　			@@ -1,7 +1,7 @@ 
					前面的”-1,7”分成三个部分：减号表示第一个文件（即f1），”1”表示第1行，”7”表示连续7行。
					合在一起，就表示下面是第一个文件从第1行开始的连续7行。
					同样的，”+1,7”表示变动后，成为第二个文件从第1行开始的连续7行。 
					第三部分是变动的具体内容。
工作区（Working Directory）
	就是你在电脑里能看到的目录，比如learngit文件夹就是一个工作区：
	版本库（Repository）
		工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	把文件往Git版本库里添加的时候，是分两步执行的：
		第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区stage；
		第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	只有增加（经过git add）到stage暂存区的修改才能被git commit到master
	修改了文件，但是还没有执行git add file.txt,执行git status，Git会告诉你，git checkout -- file可以丢弃工作区的修改
	 $ git checkout -- file.txt
		--很重要，没有--，就变成了“切换到另一个分支”的命令
	如果已经执行了git add file.txt进入了暂存区，执行git status，Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
		$ git reset HEAD readme.txt
			Unstaged changes after reset:
			M       readme.txt
		git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
	删除一个文件并将删除操作提交到stage(index)
		$ git rm file.txt
		再执行git commit的时候回将删除提交到仓库，而单纯的rm不会。

远程仓库

	先建本地仓库
		由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
		第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
			如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
				$ ssh-keygen -t rsa -C "yzlon@163.com"
		第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
			然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
		第3步：把已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
			根据GitHub的提示，在本地的learngit仓库下运行命令：
				$ git remote add origin git@github.com:yzlon/learngit.git
					yzlon:github的账户名
		第4步：就可以把本地库的所有内容推送到远程库上：
			$ git push -u origin master
				git push命令，实际上是把当前分支master推送到远程。
				由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
			从现在起，只要本地作了提交，就可以通过命令：
				$ git push origin master
		注意：SSH警告
			当第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：输入yes回车即可。
			Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
		
	先建远程仓库
		首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
			我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件

		下一步是用命令git clone克隆一个本地库：
			$ git clone git@github.com:yzlon/git-repo.git
			$ cd gitskills
			$ ls
				README.md

分支管理
	创建与合并分支
		master分支叫主分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
		当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。
		从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
		1、首先，我们创建dev分支，然后切换到dev分支：
			$ git checkout -b dev
				git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
					$ git branch dev
					$ git checkout dev
		2、然后，用git branch命令查看当前分支：
			$ git branch
			* dev
			  master
				git branch命令会列出所有分支，当前分支前面会标一个*号。
		3、现在，dev分支的工作完成，我们就可以切换回master分支：
			$ git checkout master
		
		4、切换回master分支后，而master分支此刻的提交点并没有变，现在，我们把dev分支的工作成果合并到master分支上：
			$ git merge dev
				Updating d17efd8..fec145a
				Fast-forward
				 readme.txt |    1 +
				 1 file changed, 1 insertion(+)
			git merge命令用于合并指定分支到当前分支。
			上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”
		5、合并完成后，就可以放心地删除dev分支了：
			$ git branch -d dev
			Deleted branch dev (was fec145a).
		Git鼓励大量使用分支：
			查看分支：git branch
			创建分支：git branch <name>
			切换分支：git checkout <name>
			创建+切换分支：git checkout -b <name>
			合并某分支到当前分支：git merge <name>
			删除分支：git branch -d <name>
	解决冲突
		创建2个分支，合并一个后，再合并另一个会冲突
		冲突文件中：Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存
		修改冲突后继续合并
		用带参数的git log也可以看到分支的合并情况。
			$ git log --graph --pretty=oneline --abbrev-commit
		当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		用git log --graph命令可以看到分支合并图。
		
	分支管理策略
		通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
		如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
		下面我们实战一下--no-ff方式的git merge：
			合并dev分支，加上--no-ff参数，表示禁用Fast forward：
				$ git merge --no-ff -m "merge with no-ff" dev
				因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
	分支策略
		在实际开发中，我们应该按照几个基本原则进行分支管理：
			首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
			干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
			你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
		Git分支十分强大，在团队开发中应该充分应用。
		合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

	Bug分支
		软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
		当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，当前正在dev上进行的工作还没有提交。
		并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
		幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
			$ git stash
		git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
		首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
			$ git checkout master;
			$ git checkout -b issue-101;
		修复完成后，切换到master分支，并完成合并，最后删除issue-101分支.
		然后切换到dev分支
			$ git checkout dev
		
		通过$ git status查看工作区是干净的，刚才的工作现场存到哪去了？
		用git stash list命令看看：
			$ git stash list
				stash@{0}: WIP on dev: 6224937 add merge
		工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
			一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
			另一种方式是用git stash pop，恢复的同时把stash内容也删了
			
	Feature分支
		软件开发中，总有无穷无尽的新的功能要不断添加进来。
		添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
		当你不想要这个分支的时候，是不能用$ git branch -d dev删掉的
		要用如下命令来删除未合并过的分支
			$ git branch -D feature
	多人协作
		当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
		要查看远程库的信息，用git remote
		或者，用git remote -v显示更详细的信息：
			$ git remote -v
				origin  git@github.com:michaelliao/learngit.git (fetch)
				origin  git@github.com:michaelliao/learngit.git (push)
			上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
	推送分支
		推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
			$ git push origin master
		如果要推送其他分支，比如dev，就改成：
			$ git push origin dev	
					
		但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
			master分支是主分支，因此要时刻与远程同步；
			dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
			bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
			feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。	
	抓取分支
		多人协作时，大家都会往master和dev分支上推送各自的修改。
		现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：
			$ git clone git@github.com:michaelliao/learngit.git
		当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。
		你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
			$ git checkout -b dev origin/dev
		现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：
			$ git commit -m "xxxxx"
			$ git push origin dev
		你现在试图再推送	
			$ git push origin dev
				推送失败，你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
				$ git pull
					git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
					$ git branch --set-upstream dev origin/dev
		再pull：
			$ git pull
				git pull 相当于 git fetch + git merge
			这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
				$ git commit -m "merge & fix hello.py"
				$ git push origin dev
标签管理
	概念
		发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。
		将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
		标签就是跟某个commit关联起来，便于发布和查找	
	创建标签
		首先，切换到需要打标签的分支上：		
		然后，敲命令git tag <name>就可以打一个新标签：
			$ git tag v1.0	
		可以用命令git tag查看所有标签：
			$ git tag	
		默认标签是打在最新提交的commit上的。历史标签也可以打：方法是找到历史提交的commit id，然后打上就可以了：
			$ git log --pretty=oneline --abbrev-commit	
		敲入命令：
			$ git tag v0.9 6224937（版本号)
		标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
			$ git show v0.9	
		还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
			$ git tag -a v0.1 -m "version 0.1 released" 3628164
		还可以通过-s用私钥签名一个标签：
			$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
			签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错	
			如果报错，请参考GnuPG帮助文档配置Key。
			
	操作标签
		删除标签：
			$ git tag -d v0.1
		推送某个标签到远程，使用命令git push origin <tagname>：
			$ git push origin v1.0
		一次次性推送全部尚未推送到远程的本地标签：
			$ git push origin --tags
		如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
			$ git tag -d v0.9
		然后，从远程删除。删除命令也是push，但是格式如下：
			$ git push origin :refs/tags/v0.9
		要看看是否真的从远程库删除了标签，可以登陆GitHub查看。	
			
使用GitHub
	如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，
	你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：
		git clone git@github.com:michaelliao/bootstrap.git
	一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。
	然后发起一个pull-request到bootstrap。
			
码云

关联2个远程库
	以learngit本地库为例，我们先删除已关联的名为origin的远程库：
		$ git remote rm origin
	然后，先关联GitHub的远程库：
		$ git remote add github git@github.com:michaelliao/learngit.git
		注意，远程库的名称叫github，不叫origin了。

	接着，再关联码云的远程库：
		$ git remote add gitee git@gitee.com:liaoxuefeng/learngit.git
		同样注意，远程库的名称叫gitee，不叫origin。
	现在，我们用git remote -v查看远程库信息，可以看到两个远程库：
		$ git remote -v
			gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
			gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
			github    git@github.com:michaelliao/learngit.git (fetch)
			github    git@github.com:michaelliao/learngit.git (push)
	如果要推送到GitHub，使用命令：
		$ git push github master
	如果要推送到码云，使用命令：
		$ git push gitee master
忽略特殊文件
	有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。
	在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
	不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
	忽略文件的原则是：
		忽略操作系统自动生成的文件，比如缩略图等；
		忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
		忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	可以用-f强制添加被忽略的文件到Git：
		$ git add -f App.class			
	git check-ignore命令检查 某个被忽略的文件属于哪个规则：	
		$ git check-ignore -v App.class				
			
			
			
			
			