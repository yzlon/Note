	什么是框架：
	写程序，使用框架之后，帮我们实现一部分功能，使用框架好处，少写一部分代码的实现。
什么是hibernate框架：
	1、hibernate框架是应用在javaee三层结构中dao层的框架。
	2、在dao层里面做对数据库的crud操作。hibernate底层代码就是jdbc。好处是不用写jdbc代码，不用写sql语句实现了。
	3、hibernate是开源的轻量级的框架。
	4、hibernate版本
		3.x 4.x 5.x
		
		
什么是orm思想
	1、hibernate使用orm思想对数据库进行crud操作。
	2、在web阶段学习javabean，更正确叫法是实体类。
	3、orm：object relational mapping，对象关系映射。
		1）让实体类和和数据库表进行一一对应。
			类和表对应，类属性和表字段进行对应
		2）不需要直接操作数据库表，直接操作实体类即可。	
使用hibernate编程
	hibernate封装的session对象。
	1、创建实体类对象
	2、用session.save(实体对象)就可以保存数据。
	
搭建hibernate环境
	第一步：导入hibernate的jar包
		required目录必须的
		hibernate-entitymanager-final.jar
		log4j
		slf4j
		mysql驱动
	第二步：创建实体类
		1）hibernate要求实体类中要求有一个属性是唯一的
			com.yzl.entity.User
				private int uid;
				private String username;
				private String password;
				private String address;
				setter;
				getter;
		2）使用hibernate的时候，不需要自己手动创建表，hibernate会自动创建。
	第三步：配置实体类和数据库表一一对应关系（映射关系）
		1、使用配置文件实现实现映射关系
			1)创建xml格式的配置文件。
				映射配置文件名称和位置没有固定要求。
				建议：在实体类所在的包里面创建，实体类名称.hbm.xml
			2)配置文件是xml格式的，在配置文件中首先引入xml约束。
				约束有dta、schema，在hibernate中引入的约束是dtd。
				hibernate-mapping-3.0.dtd
			3）配置
				<hibernate-mapping>
				    <!--1配置类和表对应class标签
					name属性：实体类的全路径
					table属性：数据库表的名称-->
					<class name="xxx.User" table="t_user">
					<!--2配置实体类id和表id对应
					hibernate要求实体类中要求有一个属性是唯一的
					hibernate要求表中求有一个属性是唯一的-->
					<!--
					id标签
					name属性：实体类里面id属性的名称
					column属性：生成表的字段的名称
					type：指定数据库中数据类型，一般不写，默认自动对应实体类的类型
					-->
					<id name = "uid" column="uid">
						<!--设置表id自增长策略
							native:生成表id就是自增长的
						-->
						<genrator class="native" />
					</id>
					<!--配置其他的属性和字段对应-->
					<property name="username" column="username"></property>
					<property name="password" column="password"></property>
					<property name="address" column="address"></property>
					</class>
				</hibernate-mapping>
	第四步：创建hibernate的核心配置文件
		1、核心配置文件格式xml，名称和位置是固定的
			位置：必须在src下面
			名称：必须是hibernate.cfg.xml
		2、引入dtd约束
			<hibernate-configuration>
		3、hibernate操作过程中，只会加载核心配置文件，其他的不会加载
			<hibernate-configuration>
				<session-factory>
					<!--1）配置数据库的信息，必须的-->
					<property name="hibernate.connection.driver_class"></property>
					<property name="hibernate.connection.url"></property>
					<property name="hibernate.connection.username"></property>
					<property name="hibernate.connection.password"></property>
					<!--2）配置hibernate的信息，可选的-->
					<property name="hibernate.show_sql"></property>
					<property name="hibernate.format_sql"></property>
					<!--配置自动创建表
					update：如果有表，更新，没有创建
					-->
					<property name="hibernate.hbm2ddl.auto">update</property>
					<!--配置数据库的方言，在mysql中实现分页，关键字limit，在其他是语句库里不适用
					    oracle用的分页是rownum。
						让hibernate框架来识别不同数据库的语句。
					-->
					<property name="hibernate.dialect">update</property>

					<!--3）把映射文件放到核心配置中来。-->
					<mapping resource="com/yzl/entity/User.hbm.xml"/>
				</session-factory>
			</hibernate-configuration>

实现添加操作
	第一步：加载hibernate核心配置文件
		//到src下面找到hibernate.cfg.xml文件
		Configuration cfg = new Configuration();
		cfg.configure();
	第二步：创建SessionFactory对象
		//读取hibernate核心配置文件的内容，创建sessionFactory
		//在改过程中，根据配置创建表
		SessionFactory sessionFactory = cfg.builSessionFactory();
	第三步：使用sessionFactory创建session对象
		Session session = sessionFactory.openSession();
	第四步：开启事务
		Transaction tx = session.beginTransaction();
	第五步：写具体的crud逻辑操作
		//创建对象
		User user = new User();
		user.setUsername("小王");
		user.setPassword("12343");
		
		//调用session的方法实现添加
	session.save(user);
	第六步：提交事务
		tx.commit();
	第七部：关闭资源
		session.close();
		sessionFactory.close();
	

Hibernate核心API
	Configuration
		1、到src下面找到hibernate.cfg.xml文件，创建对象，把配置文件放到对象里面（加载核心配置文件）
	SessionFactory
		1、创建configuration对象来创建sessionfactory对象。
			1）创建sessionfactory过程做的事情
				根据核心配置文件，有数据库配置，有映射文件部分，到数据库里面根据映射关系把表创建。
		2、创建sessionfactory过程很耗资源。
			1）在hibernate操作中，建议一个项目一般创建一个sessionfactory对象。
		3、具体实现
			1）写一个工具类，写静态代码块实现。
				
	Session
		1、session类似于jdbc中的connection
		2、调用session中的不同方法实现crud操作。
			1）save：添加
			2）update
			3）delete
			4）get：根据id查询
		3、session对象，单线程对象
			1）session对象不能共用，只能自己使用。
			
	Transaction
		1、开始事务
			tx=session.beginTransaction
		2、事务对象
			tx.commit();
			tx.rollback();
		3、事务的概念
			1）事务的4个特性
				原子性：一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。
				一致性：数据库总数从一个一致性的状态转换到另一个一致性的状态。
				隔离性：一个事务所做的修改在最终提交以前，对其他事务是不可见的。
				持久性：一旦事务提交，则其所做的修改就会永久保存到数据库中。
				
解决配置文件没有提示的问题
	1、可以上网
	2、把约束文件引入到eclipse中来。
		window-preference-xml-xml catalog
	
	
	
实体类属性编写规则
	1、属性是私有的
	2、使用public的setter和getter
	3、要求实体类有属性作为唯一值，一般为id
	4、建议不使用基本数据类型，而是用包装类。
		1）8个基本数据类型对应的包装类
			int-Integer
			char-Character
			long-Long
			byte-Byte
			short-Short
			double-Double
			float-Float
			boolean-Boolean
		2)比如区分学生0分和没有参加考试。
			Integer score = 0；
			Integer score = null;
	
主键的生成策略
	1、hibernate要求实体类里面有一个属性作为唯一值。
	2、hibernate主键生成策略有很多种，常用的是一下2种
		increment、identity（自动增长的像mysql）、sequence（oracle）、native、uuid
		1）<generator class="native"/>
			根据使用的数据库自动选择使用哪个
		2）<generator class="uuid"/>
			实体类的id属性应该是String类型

实体类的操作
	对持久化类的crud操作
		1、添加
			session.save();
		2、根据id查询
			session.get(Class<T> class, int id);
				第一个参数：持久化类的class
				第二个参数：id值
		3、修改操作
			1）首先查询，修改值
			2）向1返回的对象里面设置修改后的值。
			3）调update修改
				session.update(user);
					执行过程：到user对象找到uid的值，根据uid修改。
				session.save也能修改，但是不推荐
		4、删除操作
			1)首先查询
			2）调用session.delete(user);
		5、插入或者修改
			session.saveOrUpdate(user);
	
持久化类的对象的状态
	1、三种状态
		1）瞬时态：对象里面没有id值，对象与session没有关联
		2）持久态：对象里面有id值，对象与session也有关联
		3）脱管态：对象里面有id值，但是对象与session没有关联
	2、saveOrUpdate
	
Hibernate一级缓存
	条件：
		1、默认就是打开的
		2、使用范围：session的范围，从session创建到session关闭。
		3、存储数据必须是持久态的。
	
	执行流程：
	特性：
		1、持久态会自动更新数据库。
			1）查询到数据放到一级缓存，同时放到一级缓存对应的快照区。
			2）修改user持久态对象的值，同时修改一级缓存的内容。但是不会修改快照区的内容。
			3）提交事务的时候，会比较一级缓存的内容和快照区的内容是否相同，如果相同，不更新；如果不相同，就把一级缓存的内容更新到数据库。
			
		
		
Hibernate的二级缓存
	1、目前已经不使用，redis替代了。
	2、默认是关闭的，需要配置才能打开
	3、范围：是sesessionFactory范围。
	
Hibernate的事务
	默认的事务隔离级别：repeatble read
	事务代码规范的写法：
		1、代码结构
			try{
				//开启事务
				//提交事务
			}catch(){
				//回滚
			}finally{
				//关闭事务
			}
Hibernate绑定session
	1、session类似于jdbc中的connection
	2、它实现了与本地线程绑定session，threadlocal
	3、获取与本地线程session
		1）在hibernate核心配置文件中配置
			<property name="hibernate.current_session_context_class">thread</property>
		2）调用sessionFactory里面的方法得到
			sessionFactory.getCurrentSession();
	4、获取与本地绑定session的时候，如果关闭了session就报异常。
		xxx.session already closed.
	5、获取本地线程绑定的session不需要手动关闭。
Hibernate其他API的使用
	Query对象
		1、不需要写sql语句，但是写hql语句
			1）hql：hibernate query language。hibernate提供查询语言，和sql相似。
			2）hql和sql语句的区别。
				sql操作的是表和字段
				hql操作的实体类和属性
		2、查询所有的hql语句
			1）from 实体类的名称
		3、使用
			1）创建一个Query对象
				Query query  = session.createQuery("from User");
			2）调用query对象的方法得到结果
				query.list();
	Criteria对象
		1、不需要写语句，直接调用方法
		2、实现的过程
			1）创建Criteria对象
				Criteria criteria = session.createCriteria(User.class);
			2）调用方法得到结果
				criteria.list();
				
	SQLQuery对象
		1、调用底层sql
		2、实现过程
			1）创建SQLQuery对象
			2）得到结果
				1每部分都是数组
					ArrayList.toString数组转化成字符串
				2设置返回是对象
					SQLQuery.addEntity(User.class);

表与表之间的关系及配置
	一对多：多的一侧有外键，是一的主键
		1）创建2个实体类
		2）让2个实体类之间互相表示
			（1）在客户实体类里面表示多个联系人
				一个客户里面有多个联系人
				hibernate要求使用集合表示多的数据，使用set
					private Set<LinkMan> setLinkMan = new HashSet<LinkMan>();
			（2）在联系人实体类里面表示所属客户
				一个联系人只能属于一个客户
					private Customer customer;
		3)配置映射
			（1）配置基本字段的映射
			（2）在映射文件中配置一对多的关系
				-在客户映射文件中，使用set集合表示所有联系人
					<!--set的name属性，实体类集合类的属性名称-->
					<!--配置了save-update只需保存客户就行set会自动插入到联系人表-->
					<set name="setLinkMan" cascach="save-update">
						<!--hibernate机制：双向维护外键，在一和多那一方都配置外键，column外键名称-->
						<key column="clid"/>
						<!--客户所有的联系人，class写联系人实体类的全路径名称-->
						<one-to-many class="xxx.xxx.LinkMan/>
					</set>
				-在联系人映射文件中，要表示所属的客户
					<!--联系人所属的客户，
					name属性：实体类的客户的属性名称
					column：外键的名称
					class写联系人实体类的全路径名称-->
					<many-to-one name="customer" class="xxx.xxx.Customer" column="cid"/>
				(3)在核心配置文件中配置
		4）一对多的级联操作
			1、级联保存
				添加一个客户，为这个客户添加多个联系人
					<set name="setLinkMan" cascach="save-update">
			2、级联删除
					<set name="setLinkMan" cascach="save-update,delete">
				先查询客户表
				再查联系人表
				把联系人表的外键设置成null
				删除联系人
				删除客户
			3、一对多的修改
				linkman修改了2次，因为是双向外键。
				解决这个问题：让其中的一方不维护外键
					一对多修改，让一的一方放弃外键维护。
						<set name="setLinkMan" inverse="true">

	多对多：一个用户属于多个角色，一个角色有多个用户
		1、创建2个实体类
		2、实体类互相表示
			一个用户有多个角色，set集合
			一个角色有多个用户，set集合
		3、映射配置
			<!--
				name:角色set集合的名称
				table：第三张表的名称
			-->
			<set name="setRole" table="user_role">
				<!--
					key标签
					column：配置当前文件在第三张表中外键名称
				-->
				<key column="userid"/>
				<!--class:角色类全路径 column：角色在第三张表的外键-->
				<many-to-many class="xxxx.Role" column="roleid"/>
			</set>
		4、核心配置
		
		多对多的级联保存
		多对多的级联删除（不要用）
		维护第三张表的关系
			
	
	
	多对多建表，要创建第三张表维护他们之间的关系
	
	
Hibernate查询方式
	一、对象导航查询
		1、根据id查询某个客户，再查询这个客户里面所有的联系人。
		2、遍历set集合的过程就是查询多的表。		
		
	二、OID查询
		1、根据id查询某一条记录，返回对象。
			session.get(xxx,xx);
		
	三、hql查询：Query对象，写hql语句。
		1、查询所有
			FROM 实体类名称
		2、条件查询
			from 实体类名称 where 实体类属性名称=? and 实体类属性名称=？
			from 实体类名称 where 实体类属性名称 like ？
			设置条件值：query.setParameter(1,xxx);位置从0开始
		3、排序查询
			from 实体类名称 where 实体类属性名称=? and 实体类属性名称=？order by cid desc
		4、分页查询
			1)mysql用limit：select * from t_custom limit 10,10;
			2)hql中实现分页：
				设置开始id位置query.setFirstResult(10);
				设置每页的记录数query.setMaxResults(10);
		5、投影查询
			1）只查询表中的部分字段
			2）hql语句写法：
				select 实体类属性名称1,实体类属性名称2 from 实体类名称
				select后面不能写 * ！
		6、聚集函数的使用
			1）常用的聚集函数：count、sum、avg、max、min
			2）查询表记录数
				select count(*) from 持久化类名称
				query.uniqueResult();//此函数返回的是一个Long包装类型的对象
		7、HQL多表的查询
			内连接查询：
				select * from a, b where a.id = b.cid;
				等同于select * from a inner join b on a.id = b.cid;
				session.createQuery("from Customer c inner join c.setLinkMan"k);
				返回的list，里面是数组的形式
			左外连接
				select * from a left outer join b on a.id = b.cid;
				session.createQuery("from Customer c left outer join c.setLinkMan"k);
				返回的list，里面是数组的形式
			右外连接
				select * from a right outer join b where a.id = b.cid;
			迫切内连接：fetch
				和内连接的区别是，返回的list里面是对象
				session.createQuery("from Customer c inner join fetch c.setLinkMan"k);
			迫切左外连接
				session.createQuery("from Customer c left outer join fetch c.setLinkMan"k);
				返回的list，里面是数组的形式
				
	四、QBC查询：Criteria对象查询。
		1、使用qbc不需要写语句了。
		2、使用qbc操作实体类和属性。
		3、使用qbc使用对象Criteria
		
		1、查询所有
			1）创建Criteria对象
				Criteria Criteria = session.createCriteria(User.class);
			2）调用方法
				criteria.list();
		2、条件查询
			1）创建对象
			2）设置条件Restrictions
				criteria.add(Restrictions.eq("cid", 1));
				criteria.add(Restrictions.eq("custName", "baidu"));
			3)调用方法得到结果
				criteria.list();
		3、排序查询
			criteria.addOrder(Order.desc("", ""));
			criteria.addOrder(Order.asc("", ""));
		4、分页查询		
			设置分页的开始位置
				criteria.setFirstResult(10) 
			设置每页显示记录数
				criteria.setMaxResults(10) ;
		5、统计查询
			criteria.setProjection(Projections.rowCount());
			criteria.uniqueResult();
		6、离线查询:不用session也能查询
			1）创建对象
				DetachedCriteria detachedCriteria = DetachedCriteria.forClass(User.class);
			2)最终执行时才需要session	
				Criteria Criteria = detachedCriteria.getExecutableCriteria(session);

				
		
	五、本地sql查询
		1、SQLQuery对象，使用普通sql实现查询。
	
	
	
Hibernate检索策略
	检索策略分为2类
		1、立即查询：根据id查询，调用get方法，马上发送语句查询数据库
		2、延迟查询，根据id查询，调用load方法，不会马上发送查询语句到数据库，而是在得到返回对象值的时候发送。
			session.load(xxx,1);
			延迟查询分2类：
				1）类级别的延迟：根据id查询返回实体类对象，load不会马上发送查询语句
				2）关联级别的延迟：查询客户，再查询关联的联系人
			在一对多的一上的映射配置的set中，配置lazy和fetch
				fetch：值select
				lazy：true（延迟）、flase（不延迟）、extra（极其延迟）
					极其延迟：比如你只要数量，它会发送count（*）
	
批量抓取
	1、查询所有客户，返回list集合，遍历list集合，得到每个客户，再得到每个客户对应的联系人。
		遍历list的时候，再去得到联系人，每次都要查询一次联系人表。严重影响性能。
	2、优化：在客户的映射文件中，set标签配置batch-size 值越大效率越高
		<set batch-size="值"></set>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	