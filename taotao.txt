GET方式经过servlet后，汉字默认的编码格式是iso-8859-1


把系统拆分成多个工程，需要完成系统的工程需要多个工程协作完成。这种形式叫做分布式。
分布式架构
	
	


	
taotao-parent：pom父项目
	|-taotao-common（jar包）：工具类工程
	|-taotao-manager：pom工程（聚合工程）（右键-maven-Maven Module创建子模块）
		|-taotao-manager-pojo（jar包）
		|-taotao-manager-mapper（jar包）
		|-taotao-manager-service（jar包）
		|-taotao-manager-controller（war包）

要在tomcat中，运行聚合工程taotao-manager
在taotao-manager的pom文件中添加tomcat插件

在互联网行业的项目中尽可能的减少表的关联查询

sku：最小库存量单位。


ssm框架整合
	Dao层：使用mybatis框架。创建SqlMapConfig.xml
	创建一个applicationContext-dao.xml
		配置数据源
		需要让spring容器管理SqlSessionFactory，单例存在
		把mapper的代理对象放到spring容器中。使用扫描包的方式，加载mapper的代理对象。
	
	Service层：
		事务管理
		需要把service实现类对象放到spring容器中
		
	表现层
		配置注解驱动
		配置视图解析器
		配置扫描controller
		
	web.xml
		spring容器的配置
		springmvc前端控制器的配置
		post乱码过滤器的配置
		
需要把所有的配置文件放到taotao-manager-web工程下。因为此工程为war工程，其他的只是一个jar包。
	mybatis整合：SqlMapConfig.xl
	spring整合Dao：applicationContext-dao.xml
	
		
spring和springmvc父子容器的关系

maven tomcat插件的使用

商品列表的查询
	Easyui中datagrid控件要求的数据格式为：
		{total:”2”,rows:[{“id”:”1”,”name”,”张三”},{“id”:”2”,”name”,”李四”}]}
		在taotao-common中创建pojo：EasyUIDateGridResult(使用泛型)
	
	分页插件的使用
		第一步：引入pageHelper的jar包。
		第二步：需要在SqlMapConfig.xml中配置插件。
			<!-- 配置分页插件 -->
			<plugins>
				<plugin interceptor="com.github.pagehelper.PageHelper">
					<!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库-->        
		        	<property name="dialect" value="mysql"/>
				</plugin>
			</plugins>
		第三步：在查询的sql语句执行之前，添加一行代码：
			PageHelper.startPage(1, 10);
				第一个参数是page，要显示第几页。
				第二个参数是rows，每页显示的记录数。
		第四步：取查询结果的总数量。
			创建一个PageInfo类的对象，从对象中取分页信息。
	
商品的添加
	商品类目的选择
	Dao层：
	Service:
	Controller:
	
	图片的上传：
		图片服务器
			需要一个http服务器，可以使用apache Nginx
			使用ftp服务上传图片，使用linux自带的ftp服务，vsftpd
			
			需要的软件
				linux centos6.4
				nginx
				vsftpd
			安装http服务
			Nginx的安装
			
	ftp使用：
		//1、连接ftp服务器
		FTPClient ftpClient = new FTPClient();
		ftpClient.connect("192.168.25.133", 21);
		//2、登录ftp服务器
		ftpClient.login("ftpuser", "ftpuser");
		//3、读取本地文件
		FileInputStream inputStream = new FileInputStream(new File("D:\\Documents\\Pictures\\images\\2010062119283578.jpg"));
		//4、上传文件
			//1）指定上传目录
			ftpClient.changeWorkingDirectory("/home/ftpuser/www/images");
			//2）指定文件类型
			ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);
			//第一个参数：文件在远程服务器的名称
			//第二个参数：文件流
			ftpClient.storeFile("hello.jpg", inputStream);
		//5、退出登录
				
		
		在springmvc.xml中配置加载properties
		
		
		
		
商品的规格
	每一类商品有多个分组
	每个分组有多个项
	每个商品对应不同的规格参数
		商品分类表
			tb_item_cat
		商品规格分组表
			tb_item_param_group
		商品规格项
			tb_item_param_key
		商品表
			tb_item	
		商品规格信息表
			t_item_param_value
		
		外连接
	问题：
		需要创建多张表来描述规格参数之间的关系
		查询时需要复杂的sql语句查询
		规格参数数据量是商品信息的几十倍，数据量十分庞大。查询效率很低。
		如果要求新添加的商品规格项发生变化，之前的商品不变是不能实现的
	
	解决方案
		可以使用模板
		模板格式：
			{
				{
					"group":"主体",
					"params":[
								"",
								""
							 ]
				}，
				{
				
				}
			}
		
初始化：相当于传递的是一个json
	TAOTAO.initItemCat({
			fun:function(node){
			$(".addGroupTr").hide().find(".param").remove();
				//  判断选择的目录是否已经添加过规格
			  $.getJSON("/item/param/query/itemcatid/" + node.id,function(data){
				  if(data.status == 200 && data.data){
					  $.messager.alert("提示", "该类目已经添加，请选择其他类目。", undefined, function(){
						 $("#itemParamAddTable .selectItemCat").click();
					  });
					  return ;
				  }
				  $(".addGroupTr").show();
			  });	
		
		
		
		
		
淘淘页面左侧菜单
	dao：
	service：
		查询所有商品的分类生成前台要求的json数据格式。返回一个pojo。
		创建2个pojo：
			CatNode分类列表节点，包含u、n、i属性
			CatResult返回值pojo，包含一个data属性，是一个list类型。
		放到taotao-rest里面
		
		用@JsonProperty注解来把类属性转换成json的属性
		
		设置jsonp		
			MappingJacksonValue mapping = new MappingJacksonValue(itemCatResult);
			mapping.setJsonpFunction(callback);
		
		
在controller中解决返回数据的乱码问题
	返回的是字符串
		@RequestMapping(value="/httpclient/post", method=RequestMethod.POST, produces=MediaType.TEXT_PLAIN_VALUE+";charset=utf-8")		
		
		
	
Redis集群的安装
	redis，单机版默认是16个数据库。默认使用0
			集群只有一个0号库。
	ping-pong机制进行互联，内部使用二进制
	投票容错机制
	集群上所有数据都不一样。
	HashSlot：哈希槽
	有一个master挂掉，且此master没有slave，则整个集群down。
	如果一半以上的master挂掉，即使有slave，也要down
	
	模拟集群结构
		集群中有3个节点。每个节点有一主一备。需要6台机器。
		搭建一个伪分布式的集群，使用6个redis实例来模拟。
		
		搭建集群需要的环境
			需要用到官方提供的ruby脚本。
			需要ruby的环境。
				yum install ruby
				yum install rubygems
					管理ruby的包
					
		redis集群管理工具	redis-tib.rb
			依赖的包redis-3.0.0.gem(装了这个工具才能运行上面的rb)
		安装ruby的包
			gem install redis-3.0.0.gem
	
	集群的搭建
		在local目录下创建redis-cluster
		cp redis 到此目录  更名为 redis01
			dump.rdb（默认的方式)
			删掉dump.rdb
			修改redis.config
				6个redis实例，端口号从7001-7006
				cluster-enabled = yes
		把创建集群的ruby脚本redis-trib.rb复制到redis-cluster目录下
		启动6个redis实例
		创建集群
			./redis-trib.rb create --replicas 1 192.168.199.134:7001 ......
	
		测试集群
			使用任意节点下的redis-cli
				./redis-cli -h 192.168.199.134 -p 7001 -c
					-c：一定要加上
	
	redis客户端
		redis-cli：自带的客户端
		redis-deskto-manager：图形化客户端，不支持集群
		jedis客户端：
			单机版
	
	
	
	
	
单点登录系统
	
	
cookie共享
	domain必须是相同的
	例如有多个域名
		www.taotao.com
		sso.taotao.com
		search.taotao.com
		需要设置domain为.taotao.com（必须以.开头）
		设置path：/(根目录)
		
	如果是localhost就不要设置domain直接设置path就可以了。
	工具类 CookieUtils放到taotao-commons里面
	
	
	重要的数据要用关系型数据库，保证数据的正确性。
	
	
订单系统taotao-order	
	订单表 tb_order
	订单明细表 tb_order_item
	物流表tb_order_shopping
		
	使用@RequestBody接收一个json串。然后使用一个java对象的pojo进行接收
	@ResponseBody响应一个字符串，如果是java对象，要进行转换。	
	
	
zookeeper系统
	linux环境
	jdk
	zookeeper
	
	配置zookeeper
		1、在每个zookeeper文件夹下创建data文件夹
		2、分别在data文件下创建文件myid的文件，文件内容就是此机器的编号1、2、3
		3、在zookeeper/conf/下复制zoo_sample.cfg为zoo.cfg
		4、修改zoo.cfg
			配置
				dataDir=/usr/xx/x/data
				clientPort=2881
			添加
				server.1=192.168.199.11.2881:3881(2881选举端口，3881投票端口)
				server.1=192.168.199.11.2882:3882(2881选举端口，3881投票端口)
				server.1=192.168.199.11.2883:3883(2881选举端口，3881投票端口)
		5、启动zookeeper
			进入zookeeper/bin目录 ./zkServer.sh start
			查看状态
solr集群
	创建4个tomcat，修改端口		
	
	1、把solrhome中的配置文件上传到zookeeper集群，使用zookeeper的客户端上传。（solr中的zkcli.sh
	
	
	
	rpm命令	
	
生产：
	使用maven插件实现热部署
	需要使用tomcat的
		maven打包->上传->热部署